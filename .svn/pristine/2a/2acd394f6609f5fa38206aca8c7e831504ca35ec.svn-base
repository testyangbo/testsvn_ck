import { testConfig } from '../config/testConfig';
import { Browser, Page, expect } from '@playwright/test';
import * as fs from 'fs';
import * as path from 'path';
import globalSetup from '../globalSetup';

/**
 * 初始化浏览器上下文
 * @param browser 浏览器实例
 * @returns 包含上下文和页面对象的Promise
 */
export async function initializeBrowserContext(browser: Browser) {
    console.log('开始初始化浏览器上下文...');
    // 检查auth.json文件是否存在且未过期
    let context;
    const authFilePath = 'cookies/auth.json';
    if (fs.existsSync(authFilePath)) {
        const stats = fs.statSync(authFilePath);
        const modifiedTime = stats.mtime;
        const currentTime = new Date();
        const timeDifference = (currentTime.getTime() - modifiedTime.getTime()) / (1000 * 60); // 转换为分钟
        
        if (timeDifference <= 60) {
            console.log('检测到有效的已保存登录状态，正在使用...');
            // 如果存在且未过期，使用保存的登录状态
            context = await browser.newContext({ storageState: authFilePath, permissions: [] });
        } else {
            // 如果存在但已过期（超过1小时），需要重新执行全局登录
            console.log('已保存的登录状态已过期，正在自动执行全局登录...');
            try {
                // 执行全局登录
                await globalSetup();
                console.log('全局登录执行完成');
                // 重新加载上下文
                context = await browser.newContext({ storageState: authFilePath, permissions: [] });
            } catch (error) {
                console.error('全局登录执行失败:', error);
                throw new Error('全局登录执行失败，请手动运行全局登录脚本');
            }
        }
    } else {
        // 如果不存在，需要先执行全局登录
        console.log('未检测到已保存的登录状态，正在自动执行全局登录...');
        try {
            // 执行全局登录
            await globalSetup();
            console.log('全局登录执行完成');
            // 重新加载上下文
            context = await browser.newContext({ storageState: authFilePath, permissions: [] });
        } catch (error) {
            console.error('全局登录执行失败:', error);
            throw new Error('全局登录执行失败，请手动运行全局登录脚本');
        }
    }
    
    const page = await context.newPage();
    
    // 导航到首页
    console.log('开始导航到首页...');
    await page.goto(testConfig.baseURL + testConfig.index);
    await expect(page.getByRole('tab', { name: '首页' })).toBeVisible();
    console.log('成功导航到首页');
    
    console.log('浏览器上下文初始化完成');
    return { context, page };
}


/**
 * 处理页面弹窗
 * @param page 页面对象
 */
export async function handleAlerts(page: Page) {
    console.log('开始处理页面弹窗...');
    // 循环处理所有弹窗
    let alertCount = await page.getByRole('alert').count();
    console.log(`检测到 ${alertCount} 个弹窗`);

    let processed = 0;
    while (alertCount > 0) {
        try {
            await page.getByRole('alert').locator('div').nth(processed + 1).click({ timeout: 2000 });
            console.log('成功处理一个弹窗');
            processed++;
            // 重新检查弹窗
            alertCount = await page.getByRole('alert').count();
            console.log(`已处理 ${processed} 个弹窗，剩余 ${alertCount} 个弹窗`);
        } catch {
            console.log('处理弹窗时遇到错误，退出循环');
            break; // 如果点击失败则退出循环
        }

    }
    console.log('弹窗处理完成');
}